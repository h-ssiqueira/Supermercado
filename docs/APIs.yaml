# Edit on https://editor.swagger.io/
swagger: "2.0"
info:
  description: "This is a sample supermarket server."
  version: "1.0.0"
  title: "Redes Supermercado"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
tags:
- name: "Database"
  description: "Every API linked to relational database"
schemes:
- "http"
paths:
  /estoque:
    post:
      tags:
      - "Database"
      summary: "Cria um novo registro de estoque"
      description: "Adiciona um novo registro de estoque para o banco de dados"
      operationId: "addEstoque"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/stock"
      responses:
        "201":
          description: "Registro criado"
        "400":
          description: "Entrada inválida"
        "500":
          description: "Erro interno de servidor"
  /estoque/findByLocation:
    get:
      tags:
      - "Database"
      summary: "Buscar estoque por localização"
      description: "Busca um estoque com base no atributo de localização"
      operationId: "findStockByLocation"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Localização estoque"
        type: "string"
        required: true
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            items:
              $ref: "#/definitions/stock"
        "404":
          description: "Estoque não encontrado"
        "500":
          description: "Erro interno de servidor"
  /estoque/{stockId}:
    put:
      tags:
      - "Database"
      summary: "Atualizar estoque"
      description: "Atualiza a quantidade de produtos do estoque"
      operationId: "updateStock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "stockId"
        description: "Informações relativas ao estoque"
        type: "integer"
        required: true
      responses:
        "201":
          description: "Estoque atualizado com sucesso"
        "400":
          description: "Id inválido"
        "404":
          description: "Estoque não encontrado"
        "500":
          description: "Erro interno de servidor"
    get:
      tags:
      - "Database"
      summary: "Busca estoque por Id"
      description: "Retorna um único registro de estoque"
      operationId: "getStockById"
      produces:
      - "application/json"
      parameters:
      - name: "stockId"
        in: "path"
        description: "Id do estoque para buscar"
        required: true
        type: "string"
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            $ref: "#/definitions/stock"
        "400":
          description: "Id inválido"
        "404":
          description: "Estoque não encontrado"
    delete:
      tags:
      - "Database"
      summary: "Remove um estoque"
      description: "Remove um registro de estoque com base em um Id"
      operationId: "deleteStock"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "stockId"
        in: "path"
        description: "Id do estoque a ser removido"
        required: true
        type: "string"
      responses:
        "201":
          description: "Estoque removido com sucesso"
        "400":
          description: "Id inválido"
        "404":
          description: "Estoque não encontrado"
  /local/:
    get:
      tags:
      - "local"
      summary: "Retorna todos os locais"
      description: "Retorna todos os locais registrados no sistema"
      operationId: "getLocals"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Operação bem sucedida"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
        "500":
          description: "Erro interno de servidor"
    post:
      tags:
      - "local"
      summary: "Cria local"
      description: "Cria um novo registro de local"
      operationId: "createLocal"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Informações do local"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "201":
          description: "Local criado com sucesso"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Request inválido"
        "500":
          description: "Erro interno de servidor"
  /local/check/{localName}:
    get:
      tags:
      - "local"
      summary: "Busca local por nome"
      description: "Busca um local com base no nome"
      operationId: "getLocalByName"
      produces:
      - "application/json"
      parameters:
      - name: "localName"
        in: "path"
        description: "Nome do local a ser buscado"
        required: true
        type: "string"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Request inválida"
        "404":
          description: "Local não encontrado"
        "500":
          description: "Erro interno de servidor"
  /local/{localId}:
    delete:
      tags:
      - "local"
      summary: "Remove um local por Id"
      description: "Remove um local baseado em um Id"
      operationId: "deleteLocal"
      produces:
      - "application/json"
      parameters:
      - name: "localId"
        in: "path"
        description: "Id do local a ser removido"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "201":
          description: "Local removido com sucesso"
        "404":
          description: "Local não encontrado"
        "500":
          description: "Erro interno de servidor"
    put:
      tags:
      - "local"
      summary: "Atualiza um local"
      description: "Atualiza a quantidade de produtos do local"
      operationId: "updateLocal"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "localId"
        description: "Informações relativas ao local"
        type: "integer"
        required: true
      responses:
        "200":
          description: "Local atualizado com sucesso"
        "500":
          description: "Erro interno de servidor"
  /produto:
    post:
      tags:
      - "produto"
      summary: "Criar produto"
      description: "Criar um produto"
      operationId: "createProduct"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Produto criado com sucesso"
        "500":
          description: "Erro interno de servidor"
    get:
      tags:
      - "produto"
      summary: "Buscar produtos"
      description: "Busca todos os produtos registrados"
      operationId: "getProducts"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Produtos encontrados"
        "500":
          description: "Erro interno de servidor"
  ### Continua
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  stock:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      localizacao:
        type: "string"
      quantidade:
        type: "integer"
        format: "int64"
    xml:
      name: "stock"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
